#!/usr/bin/perl -w
#
# voku ekz.
#   trovufontojn.pl [-v] xml 
#
################# komenco de la programo ################

use XML::Parser;
use String::Approx 'amatch';

#$debug = 1;

#########################

@serchpado = ('/home/revo/citajhoj/biblio/01genezo.htm');

@citajhoj = ('Fruktu kaj multigxu, kaj submetu la teron al vi',
	    'Kaj estis vezpero kaj mateno jen la sepa tago',
	    'vi regu super la fisxoj de la maroj',
	    'la nomo de la rivero estis Hxidekl',
	    'la serpento estis pli rusa, ol la aliaj kampobestoj');


########################

normigu_ekz();

for $file (@serchpado) {
    open DOS,"$file"
	or die "Ne povis malfermi $file: $!\n";
    $buffer = join('',<DOS>);
    analizu();
    close DOS;
}


sub normigu_ekz {

    for $ekz (@citajhoj) {

	# normigu 
	$ekz =~ s/\W+/ /sg;

	unshift @ekzlisto, $ekz;
    }
}

sub utf8_cx {
    $vort = shift;
    $vort =~ s/\304\210/Cx/g;
    $vort =~ s/\304\234/Gx/g;
    $vort =~ s/\304\244/Hx/g;
    $vort =~ s/\304\264/Jx/g;
    $vort =~ s/\305\234/Sx/g;
    $vort =~ s/\305\254/Ux/g;
    $vort =~ s/\304\211/cx/g;
    $vort =~ s/\304\235/gx/g;
    $vort =~ s/\304\245/hx/g;
    $vort =~ s/\304\265/jx/g;
    $vort =~ s/\305\235/sx/g;
    $vort =~ s/\305\255/ux/g;      
    return $vort;
}

sub lat3_cx {
    $vort = shift;
    $vort =~ s/\306/Cx/g;
    $vort =~ s/\330/Gx/g;
    $vort =~ s/\246/Hx/g;
    $vort =~ s/\254/Jx/g;
    $vort =~ s/\336/Sx/g;
    $vort =~ s/\335/Ux/g;
    $vort =~ s/\346/cx/g;
    $vort =~ s/\370/gx/g;
    $vort =~ s/\266/hx/g;
    $vort =~ s/\274/jx/g;
    $vort =~ s/\376/sx/g;
    $vort =~ s/\375/ux/g;      
    return $vort;
}

sub analizu {
 
    # forigu chiujn strukturilojn
    $buffer =~ s/<[^>]+>//sg;

    # x-konvencio de literoj por post povi facile apliki
    # regulajn esprimoj
    $buffer = utf8_cx($buffer);
    $buffer = lat3_cx($buffer);

    my $time=time();
    trovu_m1();
    print "m1: ", time()-$time,"\n";

    $time=time();
    trovu_m4();
   print "m4: ", time()-$time,"\n";

  $time=time();
    trovu_m5();
   print "m5: ", time()-$time,"\n";

 $time=time();
    trovu_m6();   
print "m6: ", time()-$time,"\n";

}

sub ngram_match {
    my ($search,$text,$ngram_len) = @_;
    my ($i,$cnt) = (0,0);
    my $ngram_cnt = length($search) - $ngram_len + 1;

    for ($i=0; $i<$ngram_cnt; $i++) {
	$cnt++ if (index($text,substr($search,$i,$ngram_len)) >= 0);
    }

    return $cnt / $ngram_cnt;
}


# chiun frazon per String::Approx::amatch
sub trovu_m1 {
    my $n;

    # faru frazojn lau frazsignoj
    my @frazoj = split(/[!\.;\?]/,$buffer);

    foreach $ekz (@ekzlisto) {
	if (length($ekz)>=15) {
#	    print "\n", "-" x 50, "\n>>> $ekz:\n";

	    foreach $frazo (@frazoj) {
		if (length($frazo) >= 15) {
		    # normigu
		    $frazo =~ s/\W+/ /sg;
		    
		    # eble ordigu lau kvalito, se eblas eltrovi

		    for $match (amatch($ekz,["30%"],($frazo))) {
#			print "    ".(++$n).". $match\n"; 
		    }
		    
		}
	    }
	}
    }
}

# trovu eblajn lokojn per String::Approx::aindex
# kaj tie kontrolu per amatch
sub trovu_m2 {
}

sub trovu_m3 {

    # per LCS el Algorithm::Diff


}


# per 3-gramoj
sub trovu_m4 {
    my $n;

    # faru frazojn lau frazsignoj
    my @frazoj = split(/[!\.;\?]/,$buffer);

    foreach $ekz (@ekzlisto) {
	if (length($ekz)>=15) {
#	    print "\n", "-" x 50, "\n>>> $ekz:\n";

	    foreach $frazo (@frazoj) {
		if (length($frazo) >= 15) {
		    # normigu
		    $frazo =~ s/\W+/ /sg;

		    if (ngram_match($ekz,$frazo,3) > 0.60) {
	#		print "    ".(++$n).". $frazo\n"; 
		    }
		    
		}
	    }
	}
    }

}# per 4-gramoj
sub trovu_m5 {
    my $n;

    # faru frazojn lau frazsignoj
    my @frazoj = split(/[!\.;\?]/,$buffer);

    foreach $ekz (@ekzlisto) {
	if (length($ekz)>=15) {
#	    print "\n", "-" x 50, "\n>>> $ekz:\n";

	    foreach $frazo (@frazoj) {
		if (length($frazo) >= 15) {
		    # normigu
		    $frazo =~ s/\W+/ /sg;

		    if (ngram_match($ekz,$frazo,4) > 0.50) {
		#	print "    ".(++$n).". $frazo\n"; 
		    }
		    
		}
	    }
	}
    }

}


# per 5-gramoj
sub trovu_m6 {
    my $n;

    # faru frazojn lau frazsignoj
    my @frazoj = split(/[!\.;\?]/,$buffer);

    foreach $ekz (@ekzlisto) {
	if (length($ekz)>=15) {
#	    print "\n", "-" x 50, "\n>>> $ekz:\n";

	    foreach $frazo (@frazoj) {
		if (length($frazo) >= 15) {
		    # normigu
		    $frazo =~ s/\W+/ /sg;

		    if (ngram_match($ekz,$frazo,5) > 0.40) {
		#	print "    ".(++$n).". $frazo\n"; 
		    }
		    
		}
	    }
	}
    }

}



















